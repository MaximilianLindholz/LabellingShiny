strata = "group",
factorVars = c('reasonmv'),
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
# Print the table
print(tab1)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/SOMS Revision Data Table 1 CCI MV.xlsx', sheet = "Tabelle1")
names <- colnames(data)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/SOMS Revision Data Table 1 CCI MV.xlsx', sheet = "Tabelle1")
names <- colnames(data)
# Create a TableOne object
tab1 <- CreateTableOne(vars = names[3:20], # replace these with your actual variable names
strata = "group",
factorVars = names[3:20],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
# Print the table
print(tab1)
library(data.table)
library(tidyverse)
library(readxl)
library(touch)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Comorbidity")
names <- colnames(data)
library(data.table)
library(tidyverse)
library(readxl)
library(touch)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Comorbidity")
names <- colnames(data)
# Create a TableOne object
tab1 <- CreateTableOne(vars = names[2:21], # replace these with your actual variable names
strata = "group",
factorVars = names[2:21],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
# Print the table
print(tab1)
library(data.table)
library(tidyverse)
library(readxl)
library(touch)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Comorbidity")
names <- colnames(data)
# Create a TableOne object
tab1 <- CreateTableOne(vars = names[2:21], # replace these with your actual variable names
strata = "group",
factorVars = names[2:21],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab1)
# Load the package
library(haven)
# Load the .dta file
data <- read_dta("/Users/maximilianlindholz/Downloads/2023-05 SOMS DB nach Lancet.dta")
View(data)
head(data)
colnames(data)
unique(data$study_id)
library(data.table)
library(tidyverse)
library(readxl)
library(touch)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Comorbidity")
names <- colnames(data)
# Create a TableOne object
tab1 <- CreateTableOne(vars = names[2:21], # replace these with your actual variable names
strata = "group",
factorVars = names[2:21],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab1)
library(data.table)
library(tidyverse)
library(readxl)
library(touch)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Comorbidity")
names <- colnames(data)
# Create a TableOne object
tab1 <- CreateTableOne(vars = names[2:21], # replace these with your actual variable names
strata = "group",
factorVars = names[2:21],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab1)
library(data.table)
library(tidyverse)
library(readxl)
library(touch)
library(tableone)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Comorbidity")
names <- colnames(data)
# Create a TableOne object
tab1 <- CreateTableOne(vars = names[2:21], # replace these with your actual variable names
strata = "group",
factorVars = names[2:21],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab1)
tab1 <- CreateTableOne(vars = names[2:21], # replace these with your actual variable names
strata = "group",
factorVars = names[2:20],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab1)
tab1 <- CreateTableOne(vars = names[2:20], # replace these with your actual variable names
strata = "group",
factorVars = names[2:20],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab1)
# Create a TableOne object
tab1 <- CreateTableOne(vars = names[2:18], # replace these with your actual variable names
strata = "group",
factorVars = names[2:18],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab1)
# Load the package
library(haven)
# Load the .dta file
data <- read_dta("/Users/maximilianlindholz/Downloads/2023-05 SOMS DB nach Lancet.dta")
View(data)
library(data.table)
library(tidyverse)
library(readxl)
library(touch)
library(tableone)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Comorbidity")
names <- colnames(data)
# Create a TableOne object
tab1 <- CreateTableOne(vars = names[2:18], # replace these with your actual variable names
strata = "group",
factorVars = names[2:18],
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab1)
# read in of Table 1 of CENTER DATEN ALL RUV2
data <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Codiert")
head(data)
# read in of Table 1 of CENTER DATEN ALL RUV2
data2 <- read_excel('/Users/maximilianlindholz/Downloads/Classification ALL.xlsx', sheet = "Codiert")
names <- colnames(data2)
head(data2)
names
# Create a TableOne object
tab2 <- CreateTableOne(vars = c("reasonmv"), # replace these with your actual variable names
strata = "group",
factorVars = c("reasonmv"),
# replace 'treatment' with your actual group variable
data = data,
test = FALSE)
print(tab2)
?haven
scores <- read_dta('/Users/maximilianlindholz/Downloads/2023-05 SOMS DB nach Lancet.dta')
View(scores)
colnames(scores)
scores[,195]
scores <- scores %>% dplyr::select(c("Group","muscle_weakness","MRC_total_mrc","MRCweak","MRCwsum"))
View(scores)
scores <- scores %>% dplyr::select(c("dead","dead90","study_id","Group","muscle_weakness","MRC_total_mrc","MRCweak","MRCwsum"))
scores <- scores %>% dplyr::select(c("dead","dead90","study_id","Group","muscle_weakness","MRC_total_mrc","MRCweak","MRCwsum"))
scores <- read_dta('/Users/maximilianlindholz/Downloads/2023-05 SOMS DB nach Lancet.dta')
scores <- scores %>% dplyr::select(c("dead","dead90","study_id","Group","muscle_weakness","MRC_total_mrc","MRCweak","MRCwsum"))
View(scores)
?read_dta
scores <- read_dta('/Users/maximilianlindholz/Downloads/2023-05 SOMS DB nach Lancet.dta')
head(scores)
scores <- scores %>% dplyr::select(c("Day","dead","dead90","study_id","Group","muscle_weakness","MRC_total_mrc","MRCweak","MRCwsum"))
scores <- subset(scores, scores$Day==0)
View(scores)
scores1 <- read_dta('/Users/maximilianlindholz/Downloads/2023-05 SOMS DB nach Lancet.dta')
View(scores1)
scores <- read_dta('/Users/maximilianlindholz/Downloads/2023-05 SOMS DB nach Lancet.dta')
"muscle_weakness"
"MRC_total_mrc"
"MRCweak"
"MRCwsum"
scores <- scores %>% dplyr::select(c("Day","dead","dead90","study_id","Group","muscle_weakness","MRC_total_mrc","MRCweak","MRCwsum"))
View(scores)
rm(list = ls());gc()
library(data.table)
library(tidyverse)
library(bit64)
library(lubridate)
library(comorbidity)
# Cohort => For now Co6ID is the unique ID
cohort <- fread('/Volumes/NO NAME/RICP/cohort_complete.csv')
# SAP
# basic data
sap1 <- fread('/Volumes/NO NAME/RICP/sap_npat.csv')
# treatments
sap2 <- fread('/Volumes/NO NAME/RICP/sap_nicp.csv')
# weird
sap3 <- fread('/Volumes/NO NAME/RICP/sap_nfal.csv')
# diagnosen
sap4 <- fread('/Volumes/NO NAME/RICP/sap_ndia.csv')
# verschiebungen
sap5 <- fread('/Volumes/NO NAME/RICP/sap_nbew.csv')
# intensivstationen
# get cobra6 first as pseudobnym has duplicates => So mit Sebastian Boie besprochen
sap1 <- merge(sap1, cohort, by = 'c_pseudonym')
sap1 <- sap1 %>% dplyr::select(-c('c_pseudonym'))
sap2 <- merge(sap2, cohort, by = 'c_pseudonym')
sap2 <- sap5 %>% dplyr::select(-c('c_pseudonym'))
sap3 <- merge(sap3, cohort, by = 'c_pseudonym')
sap3 <- sap5 %>% dplyr::select(-c('c_pseudonym'))
sap4 <- merge(sap4, cohort, by = 'c_pseudonym')
sap4 <- sap4 %>% dplyr::select(-c('c_pseudonym'))
sap5 <- merge(sap5, cohort, by = 'c_pseudonym')
sap5 <- sap5 %>% dplyr::select(-c('c_pseudonym'))
# admission discharge bewty 2 and 1
test <- subset(sap5, sap5$c_bewty==2 | sap5$c_bewty==1)
# subset only correct dates (there are around 5 faulty ones => Year 9999)
sap5 <- subset(sap5, sap5$c_bwedt<20230503)
# Convert the values to dates
sap5$c_bwedt <- as.Date(as.character(sap5$c_bwedt), format="%Y%m%d")
# admission => bewty 1 ist aufnahme
aufnahme <- subset(sap5, sap5$c_bewty ==1) %>% select('co6_patient_id', 'c_bewty', 'c_bwart', 'c_bwedt')
# sometimes duplicate due to insurance (BU)
# erstmal doppelte buchungen raushauen, aber nicht wenn sie im zeitraum zweimal aufgenommenwerden, hier annahme: die buchung erfolgt am selben tag (war bei manuellem check so)
aufnahme <- aufnahme %>% distinct(co6_patient_id, c_bwedt, .keep_all = TRUE)
rm(list = ls());gc()
library(data.table)
library(tidyverse)
library(bit64)
library(lubridate)
library(comorbidity)
# Cohort => For now Co6ID is the unique ID
cohort <- fread('/Volumes/NO NAME/RICP/cohort_complete.csv')
# SAP
# basic data
sap1 <- fread('/Volumes/NO NAME/RICP/sap_npat.csv')
# treatments
sap2 <- fread('/Volumes/NO NAME/RICP/sap_nicp.csv')
# weird
sap3 <- fread('/Volumes/NO NAME/RICP/sap_nfal.csv')
# diagnosen
sap4 <- fread('/Volumes/NO NAME/RICP/sap_ndia.csv')
# verschiebungen
sap5 <- fread('/Volumes/NO NAME/RICP/sap_nbew.csv')
# intensivstationen
# get cobra6 first as pseudobnym has duplicates => So mit Sebastian Boie besprochen
sap1 <- merge(sap1, cohort, by = 'c_pseudonym')
sap1 <- sap1 %>% dplyr::select(-c('c_pseudonym'))
sap2 <- merge(sap2, cohort, by = 'c_pseudonym')
sap2 <- sap5 %>% dplyr::select(-c('c_pseudonym'))
sap3 <- merge(sap3, cohort, by = 'c_pseudonym')
sap3 <- sap5 %>% dplyr::select(-c('c_pseudonym'))
sap4 <- merge(sap4, cohort, by = 'c_pseudonym')
sap4 <- sap4 %>% dplyr::select(-c('c_pseudonym'))
sap5 <- merge(sap5, cohort, by = 'c_pseudonym')
sap5 <- sap5 %>% dplyr::select(-c('c_pseudonym'))
# admission discharge bewty 2 and 1
test <- subset(sap5, sap5$c_bewty==2 | sap5$c_bewty==1)
# subset only correct dates (there are around 5 faulty ones => Year 9999)
sap5 <- subset(sap5, sap5$c_bwedt<20230503)
# Convert the values to dates
sap5$c_bwedt <- as.Date(as.character(sap5$c_bwedt), format="%Y%m%d")
# admission => bewty 1 ist aufnahme
aufnahme <- subset(sap5, sap5$c_bewty ==1) %>% select('co6_patient_id', 'c_bewty', 'c_bwart', 'c_bwedt')
# sometimes duplicate due to insurance (BU)
# erstmal doppelte buchungen raushauen, aber nicht wenn sie im zeitraum zweimal aufgenommenwerden, hier annahme: die buchung erfolgt am selben tag (war bei manuellem check so)
aufnahme <- aufnahme %>% distinct(co6_patient_id, c_bwedt, .keep_all = TRUE)
View(aufnahme)
# nur patienten nach einem bestimmten zeitpunkt!
aufnahme <- subset(aufnahme, aufnahme$c_bwedt>as.Date("2019-01-01"))
# Rest subsetten => Nur Patienten nach Tag X
cohort <- subset(cohort, cohort$co6_patient_id %in% unique(aufnahme$co6_patient_id))
sap1 <- subset(sap1, sap1$co6_patient_id %in% unique(aufnahme$co6_patient_id))
sap2 <- subset(sap2, sap2$co6_patient_id %in% unique(aufnahme$co6_patient_id))
sap3 <- subset(sap3, sap3$co6_patient_id %in% unique(aufnahme$co6_patient_id))
sap4 <- subset(sap4, sap4$co6_patient_id %in% unique(aufnahme$co6_patient_id))
sap5 <- subset(sap5, sap5$co6_patient_id %in% unique(aufnahme$co6_patient_id))
sap5 <- subset(sap5, sap5$c_bwedt>as.Date("2019-01-01"))
# discharge or death
entlassung <- subset(sap5, sap5$c_bewty==2) %>% select('co6_patient_id', 'c_bewty', 'c_bwart', 'c_bwedt')
tod <- subset(entlassung, entlassung$c_bwart %in% c('T', 'EH'))
tod <- unique(tod$co6_patient_id)
entlassung <- entlassung %>% group_by(co6_patient_id) %>% arrange(desc(c_bwedt)) %>% slice(1)
# stationen along the way
stationen <- sap5 %>% select('co6_patient_id', 'c_bewty', 'c_bwart', 'c_bwedt','c_orgpf','c_orgfa')
stationen <- unique(stationen$c_orgfa)
test <- unique(stationen$c_orgpf)
head(stationen)
sap5 <- subset(sap5, sap5$c_bwedt>as.Date("2019-01-01"))
# discharge or death
entlassung <- subset(sap5, sap5$c_bewty==2) %>% select('co6_patient_id', 'c_bewty', 'c_bwart', 'c_bwedt')
tod <- subset(entlassung, entlassung$c_bwart %in% c('T', 'EH'))
tod <- unique(tod$co6_patient_id)
entlassung <- entlassung %>% group_by(co6_patient_id) %>% arrange(desc(c_bwedt)) %>% slice(1)
# stationen along the way
stationen <- sap5 %>% select('co6_patient_id', 'c_bewty', 'c_bwart', 'c_bwedt','c_orgpf','c_orgfa')
test <- unique(stationen$c_orgfa)
test
test <- unique(stationen$c_orgpf)
write.csv(test, "/Users/maximilianlindholz/Desktop/Stationen.csv")
rm(list = ls());gc()
library(data.table)
library(tidyverse)
library(MASS)
library(survival)
library(tidycmprsk)
library(tableone)
library(cobalt)
options(contrasts=c(unordered="contr.sum", ordered="contr.poly"))
# general patient data
data_unmatched <- fread("/Users/maximilianlindholz/Final/baseinfoclara.csv")
data <- fread("/Users/maximilianlindholz/Desktop/Promotion:Arbeit/Clara/PropensityScoreMatched/CodeClean/data_main.csv")
data_sg <- fread("/Users/maximilianlindholz/Desktop/Promotion:Arbeit/Clara/PropensityScoreMatched/CodeClean/data_sg.csv")
# controll max data and create adittional frame for plotting
data$plot[!is.na(data$max)]<-data$max[!is.na(data$max)]
data$plot[is.na(data$n)]<--1
# plot IMS levels
# plot graphic
data$plot <- as.character(data$plot)
data$plot[data$plot==-1]<-"0a"
data$plot[data$plot==0]<-"0b"
data$plot <- factor(data$plot, levels = c("0a", "0b", "1","2","3","4","5","6","7","9","10"))
# create nicer legend
data$COVID19[data$covid==1]<-"Yes"
data$COVID19[data$covid==0]<-"No"
plot <- data %>% dplyr::select('COVID19', 'plot')
plot %>%
count(plot, COVID19 = factor(COVID19))  %>%
group_by(COVID19) %>%
mutate(n = prop.table(n) * 100) %>%
ggplot(aes(plot, n, fill = COVID19)) + geom_col(position = 'dodge')+
xlab("Highest IMS") +
ylab("Percentage")+
scale_fill_manual(values=c("Yes"="#F8766D" , "No"="#00BFC4"))+
theme(
panel.background = element_rect(fill = 'white', colour = 'white'),
legend.position=c(.8,.75),
axis.line.x.bottom=element_line(color="black"),
axis.line.y.left=element_line(color="black")
)
# Table 2 SG
tab2_sg <- CreateTableOne(vars = c("perday", "frühmobi", "max"), strata = "group",
data = data_sg, factorVars = c("frühmobi"), test = T)
tab4Mat_sg <- print(tab2_sg, showAllLevels = FALSE,formatOptions = list(big.mark = ","),nonnormal = c('perday',"max"))
# lm for perday
summary(lm(perday~admissionapache+group, data=data_sg))
confint(lm(perday~admissionapache+group, data=data_sg), "group", level=0.95)
# MASS unsdjusted
data_sg$max <- as.ordered(data_sg$max)
m <- polr(max~ group, data = data_sg, Hess=TRUE)
summary(m)
ctable <- coef(summary(m))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
ctable <- cbind(ctable, "p value" = p)
ci <- confint(m)
exp(coef(m))
exp(cbind(OR = coef(m), ci))
tab4Mat_sg
# lm for perday
summary(lm(perday~admissionapache+group, data=data_sg))
confint(lm(perday~admissionapache+group, data=data_sg), "group", level=0.95)
install.packages("torch")
library(torch)
library(torch)
library(torch)
install.packages("oro.nifti")
library(oro.nifti)
install.packages("nifti.io")
?nifit.io
library(nifti.io)
install.packages("RNifti")
library(data.table)
data <- fread('/Users/maximilianlindholz/Desktop/reasonmv.csv')
library(data.table)
data <- fread('/Users/maximilianlindholz/Desktop/reasonmv.csv')
head(data)
library(data.table)
data <- fread('/Users/maximilianlindholz/Desktop/reasonmv.csv')
head(data)
library(data.table)
data <- fread('/Users/maximilianlindholz/Desktop/reasonmv.csv')
table(data$group, data$reasonmv)
table(data$reasonmv,data$group)
table(data$adaptedreasonmv,data$group)
library(data.table)
data <- fread('/Users/maximilianlindholz/Desktop/reasonmv.csv')
table(data$reasonmv,data$group)
table(data$adaptedreasonmv,data$group)
library(data.table)
data <- fread('/Users/maximilianlindholz/Desktop/reasonmv.csv')
table(data$reasonmv,data$group)
table(data$adaptedreasonmv,data$group)
data2 <- fread('/Users/maximilianlindholz/Desktop/test_copy.csv')
data2 <- fread('/Users/maximilianlindholz/Desktop/test_copy.csv')
table(data2$group, data2$reasonmv)
table(data2$group, data2$reasonmvcorrected)
table(data2$reasonmvcorrected,data2$group)
data2 <- fread('/Users/maximilianlindholz/Desktop/test_copy.csv')
table(data2$group, data2$reasonmv)
table(data2$reasonmvcorrected,data2$group)
data2 <- fread('/Users/maximilianlindholz/Desktop/test_copy.csv')
table(data2$reasonmvcorrected,data2$group)
library(data.table)
data <- fread('/Users/maximilianlindholz/Desktop/reasonmv.csv')
table(data$reasonmv,data$group)
table(data$adaptedreasonmv,data$group)
library(data.table)
data <- fread('/Users/maximilianlindholz/Desktop/reasonmv.csv')
table(data$reasonmv,data$group)
table(data$adaptedreasonmv,data$group)
table(data$adaptedreasonmv)
View(data)
17+12+55+41+4+7+33+24+3+1+1+1+1
library(data.table)
name <- fread('/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_Neuro.csv')
write.csv(name,'/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv' )
library(data.table)
name <- fread('/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv')
write.csv(name,'/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv' )
library(data.table)
name <- fread('/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv')
write.csv(name,'/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv' )
library(data.table)
name <- fread('/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv')
write.csv(name,'/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv' )
library(data.table)
name <- fread('/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv')
write.csv(name,'/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv' , sep = ";")
library(data.table)
name <- fread('/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv')
write.csv(name,'/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv')
library(data.table)
name <- fread('/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_Neuro.csv')
write.csv(name,'/Users/maximilianlindholz/GitHub/masterarbeit/Data/CDE_NeuroF.csv')
setwd("~/GitHub/nifti_viewer/shiny")
run_app()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
run_app()
shiny::run_app()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/LabellingShiny/shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinyWidgets")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/LabellingShiny/shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/LabellingShiny")
shiny::runApp()
